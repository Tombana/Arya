#pragma once
#include <functional>
using std::function;

union SDL_Event;

namespace Arya
{
    enum INPUTEVENT
    {
        INPUT_KEYDOWN = 1,
        INPUT_KEYUP,
        INPUT_MOUSEBUTTONDOWN,
        INPUT_MOUSEBUTTONUP,
        INPUT_MOUSEMOVEMENT,
        INPUT_MOUSEWHEEL
    };

    enum MOUSEBUTTON
    {
        MOUSEBUTTON_LEFT = 1,
        MOUSEBUTTON_MIDDLE,
        MOUSEBUTTON_RIGHT
    };

    class InputSystem
    {
        public:
            InputSystem();
            ~InputSystem();

            //! Register for a callback
            //! Only one binding can be used for each event
            //! Different events require different callback prototypes
            void bind(INPUTEVENT event, function<void(int)> f);
            void bind(INPUTEVENT event, function<void(MOUSEBUTTON,int,int)> f);
            void bind(INPUTEVENT event, function<void(int,int,int,int)> f);

            //! Unbind an event
            void unbind(INPUTEVENT event);

            //! Handle an input related event generated by SDL
            //! Called by Root
            void handleInputEvent(const SDL_Event& event);

        private:
            function<void(int)> bindingKeyDown;
            function<void(int)> bindingKeyUp;
            function<void(MOUSEBUTTON,int,int)> bindingMouseDown;
            function<void(MOUSEBUTTON,int,int)> bindingMouseUp;
            function<void(int,int,int,int)> bindingMouseMovement;
            function<void(int)> bindingMouseWheel;
    };
}
